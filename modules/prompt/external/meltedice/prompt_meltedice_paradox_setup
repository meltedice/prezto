# -*- coding: utf-8; mode: shell-script -*-
#
# Customized by: ice <meltedise@gmail.com>
#
# A two-line, Powerline-inspired theme that displays contextual information.
#
# This theme requires a patched Powerline font, get them from
# https://github.com/Lokaltog/powerline-fonts.
#
# Authors:
#   Isaac Wolkerstorfer <i@agnoster.net>
#   Jeff Sandberg <paradox460@gmail.com>
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#
# Screenshots:
#   http://i.imgur.com/0XIWX.png
#

#
# 16 Terminal Colors
# -- ---------------
#  0 black
#  1 red
#  2 green
#  3 yellow
#  4 blue
#  5 magenta
#  6 cyan
#  7 white
#  8 bright black
#  9 bright red
# 10 bright green
# 11 bright yellow
# 12 bright blue
# 13 bright magenta
# 14 bright cyan
# 15 bright white
#

# Load dependencies.
pmodload 'helper'

# Define variables.
_prompt_meltedice_paradox_current_bg='NONE'
_prompt_meltedice_paradox_segment_separator=''
_prompt_meltedice_paradox_start_time=$SECONDS

function prompt_meltedice_paradox_start_segment {
  local bg fg
  [[ -n "$1" ]] && bg="%K{$1}" || bg="%k"
  [[ -n "$2" ]] && fg="%F{$2}" || fg="%f"
  if [[ "$_prompt_meltedice_paradox_current_bg" != 'NONE' && "$1" != "$_prompt_meltedice_paradox_current_bg" ]]; then
    print -n " $bg%F{$_prompt_meltedice_paradox_current_bg}$_prompt_meltedice_paradox_segment_separator$fg "
  else
    print -n "$bg$fg "
  fi
  _prompt_meltedice_paradox_current_bg="$1"
  [[ -n "$3" ]] && print -n "$3"
}

function prompt_meltedice_paradox_end_segment {
  if [[ -n "$_prompt_meltedice_paradox_current_bg" ]]; then
    print -n " %k%F{$_prompt_meltedice_paradox_current_bg}$_prompt_meltedice_paradox_segment_separator"
  else
    print -n "%k"
  fi
  print -n "%f"
  _prompt_meltedice_paradox_current_bg=''
}

function prompt_meltedice_paradox_build_prompt {
  # prompt_meltedice_paradox_start_segment black default '%(?::%F{red}✘ )%(!:%F{yellow}⚡ :)%(1j:%F{cyan}⚙ :)%F{blue}%n%F{red}@%F{bright green}%m%f'
  # prompt_meltedice_paradox_start_segment blue black '$_prompt_meltedice_paradox_pwd'
  # prompt_meltedice_paradox_start_segment black default '%(?::%F{red}✘ )%(!:%F{yellow}⚡ :)%(1j:%F{cyan}⚙ :)%F{magenta}%n%F{red}@%F{red}%m%f'
  prompt_meltedice_paradox_start_segment black default '%(?::%F{red}✘ )%(!:%F{yellow}⚡ :)%(1j:%F{cyan}⚙ :)%F{1}%n%F{3}@%F{2}%m%f'
  prompt_meltedice_paradox_start_segment magenta black '$_prompt_meltedice_paradox_pwd'

  if [[ -n "$git_info" ]]; then
    prompt_meltedice_paradox_start_segment green black '${(e)git_info[ref]}${(e)git_info[status]}'
  fi

  prompt_meltedice_paradox_end_segment
}

function prompt_meltedice_paradox_pwd {
  local pwd="${PWD/#$HOME/~}"

  if [[ "$pwd" == (#m)[/~] ]]; then
    _prompt_meltedice_paradox_pwd="$MATCH"
    unset MATCH
  else
    _prompt_meltedice_paradox_pwd="${${${${(@j:/:M)${(@s:/:)pwd}##.#?}:h}%/}//\%/%%}/${${pwd:t}//\%/%%}"
  fi
}

function prompt_meltedice_paradox_print_elapsed_time {
  local end_time=$(( SECONDS - _prompt_meltedice_paradox_start_time ))
  local hours minutes seconds remainder

  if (( end_time >= 3600 )); then
    hours=$(( end_time / 3600 ))
    remainder=$(( end_time % 3600 ))
    minutes=$(( remainder / 60 ))
    seconds=$(( remainder % 60 ))
    print -P "%B%F{red}>>> elapsed time ${hours}h${minutes}m${seconds}s%b"
  elif (( end_time >= 60 )); then
    minutes=$(( end_time / 60 ))
    seconds=$(( end_time % 60 ))
    print -P "%B%F{yellow}>>> elapsed time ${minutes}m${seconds}s%b"
  elif (( end_time > 10 )); then
    print -P "%B%F{green}>>> elapsed time ${end_time}s%b"
  fi
}

function prompt_meltedice_paradox_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  prompt_meltedice_paradox_pwd

  # Get Git repository information.
  if (( $+functions[git-info] )); then
    git-info
  fi

  # Calculate and print the elapsed time.
  prompt_meltedice_paradox_print_elapsed_time
}

function prompt_meltedice_paradox_preexec {
  _prompt_meltedice_paradox_start_time="$SECONDS"
}

function prompt_meltedice_paradox_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hook for calling git-info before each command.
  add-zsh-hook preexec prompt_meltedice_paradox_preexec
  add-zsh-hook precmd prompt_meltedice_paradox_precmd

  # sorin's
  # # Set editor-info parameters.
  # zstyle ':prezto:module:editor:info:completing' format '%B%F{7}...%f%b'
  # zstyle ':prezto:module:editor:info:keymap:primary' format ' %B%F{1}❯%F{3}❯%F{2}❯%f%b'
  # zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format ' %F{3}♺%f'
  # zstyle ':prezto:module:editor:info:keymap:alternate' format ' %B%F{2}❮%F{3}❮%F{1}❮%f%b'

  # paradox's
  # # Set editor-info parameters.
  # zstyle ':prezto:module:editor:info:completing' format '%B%F{red}...%f%b'
  # zstyle ':prezto:module:editor:info:keymap:primary' format '%B%F{blue}❯%f%b'
  # zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format '%F{red}♺%f'
  # zstyle ':prezto:module:editor:info:keymap:alternate' format '%B%F{red}❮%f%b'

  # meltedice meltedice_paradox's
  # Set editor-info parameters.
  zstyle ':prezto:module:editor:info:completing' format '%B%F{7}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format '%B%F{1}❯%F{3}❯%F{2}❯%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format '%F{3}♺%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format '%B%F{2}❮%F{3}❮%F{1}❮%f%b'

  # Set git-info parameters.
  zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:action' format ' ⁝ %s'
  zstyle ':prezto:module:git:info:added' format ' ✚'
  zstyle ':prezto:module:git:info:ahead' format ' ⬆'
  zstyle ':prezto:module:git:info:behind' format ' ⬇'
  zstyle ':prezto:module:git:info:branch' format ' %b'
  zstyle ':prezto:module:git:info:commit' format '➦ %.7c'
  zstyle ':prezto:module:git:info:deleted' format ' ✖'
  zstyle ':prezto:module:git:info:dirty' format ' ⁝'
  zstyle ':prezto:module:git:info:modified' format ' ✱'
  zstyle ':prezto:module:git:info:position' format '%p'
  zstyle ':prezto:module:git:info:renamed' format ' ➙'
  zstyle ':prezto:module:git:info:stashed' format ' S'
  zstyle ':prezto:module:git:info:unmerged' format ' ═'
  zstyle ':prezto:module:git:info:untracked' format ' ?'
  zstyle ':prezto:module:git:info:keys' format \
    'ref' '$(coalesce "%b" "%p" "%c")' \
    'status' '%s%D%A%B%S%a%d%m%r%U%u'

  # Define prompts.
  PROMPT='
${(e)$(prompt_meltedice_paradox_build_prompt)}
 ${editor_info[keymap]} '

  # RPROMPT='%F{blue}[%F{bright green}%D{%H:%M:%S}%F{blue}]%f'
  RPROMPT='%F{red}[%F{magenta}%D{%H:%M:%S}%F{red}]%f'

  # SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
  SPROMPT='zsh: correct %F{red}%R%f to %F{bright green}%r%f [nyae]? '
}

prompt_meltedice_paradox_setup "$@"
